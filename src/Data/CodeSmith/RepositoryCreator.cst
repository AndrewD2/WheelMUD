<%@ Template Language="C#" TargetLanguage="C#" Description="An example on creating a class with properties from a database table." %>

<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="DataSource" Optional="False" %>

<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.Core.Extensions" %>

<% foreach(TableSchema currentTable in SourceDatabase.Tables) { %>
// <auto-generated />
//-----------------------------------------------------------------------------
// <copyright file="<%=currentTable%>Repository.cs" company="WheelMUD Development Team">
//   Copyright (c) WheelMUD Development Team. See LICENSE.txt. This file is
//   subject to the Microsoft Public License. All other rights reserved.
// </copyright>
// <summary>
//   auto-generated by RepositoryCreator.cst on <% = DateTime.Now.ToString() %>
// </summary>
//-----------------------------------------------------------------------------

namespace WheelMUD.Data.Repositories
{
    using System.Collections.Generic;
    using System.Data;
    using ServiceStack.OrmLite;
    using WheelMUD.Data.Entities;
    
    /// <summary>Repository for the <%=currentTable%> table.</summary>
    public partial class <%=currentTable%>Repository : I<%=currentTable%>Repository
    {
        public void Add(<%=currentTable%>Record <%=currentTable.ToString().ToLower() %>)
        {
            using (IDbCommand session = Helpers.OpenSession())
                using (IDbTransaction transaction = session.BeginTransaction())
                {
                    session.Save(<%=currentTable.ToString().ToLower() %>);
                    transaction.Commit();
                }
        }

        public void Update(<%=currentTable%>Record <%=currentTable.ToString().ToLower() %>)
        {
            using (IDbCommand session = Helpers.OpenSession())
                using (IDbTransaction transaction = session.BeginTransaction())
                {
                    session.Update(<%=currentTable.ToString().ToLower() %>);
                    transaction.Commit();
                }
        }

        public void Remove(<%=currentTable%>Record <%=currentTable.ToString().ToLower() %>)
        {
            using (IDbCommand session = Helpers.OpenSession())
                using (IDbTransaction transaction = session.BeginTransaction())
                {
                    session.Delete(<%=currentTable.ToString().ToLower() %>);
                    transaction.Commit();
                }
        }
        
        public <%=currentTable%>Record GetById(long <%=currentTable.ToString().ToLower() %>Id)
        {
            using (IDbCommand session = Helpers.OpenSession())
                return session.SingleWhere<<%=currentTable%>Record>("ID = {0}", <%=currentTable.ToString().ToLower() %>Id);
        }

        public <%=currentTable%>Record GetByName(string name)
        {
            using (IDbCommand session = Helpers.OpenSession())
            {
                return session.SingleWhere<<%=currentTable%>Record>("Name = {0}", name);
            }
        }

        public ICollection<<%=currentTable%>Record> FetchAll()
        {
            using (IDbCommand session = Helpers.OpenSession())
            {
                return session.Select<<%=currentTable%>Record>();
            }
        }
    }
}
<% } %>